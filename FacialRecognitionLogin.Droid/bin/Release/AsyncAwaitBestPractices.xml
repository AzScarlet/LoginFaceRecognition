<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncAwaitBestPractices</name>
    </assembly>
    <members>
        <member name="T:AsyncAwaitBestPractices.TaskExtensions">
            <summary>
            Extension methods for System.Threading.Tasks.Task
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.TaskExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Boolean,System.Action{System.Exception})">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.WeakEventManager`1">
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
            <typeparam name="TEventArgs">Event args type.</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.AddEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.RemoveEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Removes the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.HandleEvent(System.Object,`0,System.String)">
            <summary>
            Executes the event
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.WeakEventManager">
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.AddEventHandler(System.Delegate,System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.RemoveEventHandler(System.Delegate,System.String)">
            <summary>
            Removes the event handler.
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.HandleEvent(System.Object,System.Object,System.String)">
            <summary>
            Executes the event
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
    </members>
</doc>
